import { rect, EventHub, limitValue, point } from './utils';
import { Status } from './render/SymbolCanvasRendener';
import { HistoryEntry } from './model/history';
import * as renderer from './render/canvasRenderer';
import { ComFunc, CropProps, CropState, CropComponent, localTouchEvent } from './core.type';
import { properties, Graphics } from './render/Symbols/Shape';
export declare class Crop extends EventHub {
    private nativeEventStop;
    private nativeEventPrev;
    private canRender;
    private el;
    private canDraw;
    private state;
    private context;
    private _translatePosition;
    private _focus;
    private _isMDown;
    private _disappearColor;
    private _renderer;
    private _container;
    private graphicsMap;
    private currentGraphics;
    private events;
    private currentPage;
    private _installedCom;
    private history;
    constructor(option: Required<CropProps>, ready?: (...arg: any[]) => void);
    getElement(id: string): Graphics | null;
    translateRender(data?: {
        x?: number;
        y?: number;
    }): void;
    drawCurrentGroup(strokes?: Graphics[] | Graphics): void;
    drawGraphics(ctx: CanvasRenderingContext2D, strokes?: Graphics | Graphics[]): void;
    getSelectGraphics(point: point): Graphics | undefined | null;
    getCrashActiveLineAndRemove(currentPage: Graphics[], ePoint: point, radius: number, once?: boolean): Graphics[];
    getRectCrashLine(currentPage: Graphics[], limitValue: limitValue, isRemove?: boolean): Graphics[];
    registerEvents(): void;
    unuse(name: string): void;
    use(option: CropComponent): Promise<ComFunc<Crop>>;
    dispose(): void;
    closeHandWrite(): void;
    openHandWrite(): void;
    closeRender(): void;
    openRender(): void;
    clearDisappear(): void;
    setPenWidth(penWidth: number): void;
    setPenColor(color: string): void;
    setToRubber(): void;
    setToWriting(): void;
    setToDisappear(): void;
    setDrawStatus(value: Status): void;
    get statusConfig(): CropState;
    get penColor(): string;
    get normalPenColor(): string;
    get width(): number;
    get height(): number;
    isNormalPen(): boolean;
    set disappearColor(color: string);
    get disappearColor(): string;
    focus(): void;
    blur(): void;
    resize(screen?: rect): void;
    clear(): void;
    get penWidth(): number;
    reset(): void;
    historyRender(data: HistoryEntry, event: 'undo' | 'redo'): void;
    get canUndo(): boolean;
    undo(): void;
    get canRedo(): boolean;
    redo(): void;
    onEvent(event: TouchEvent | MouseEvent): void;
    handleTouchEvent(event: localTouchEvent): void;
    appendToImage(data: properties & {
        key: number;
    }): void;
    dispatchLocalEvent(data: any[]): void;
    dispatchEvent(data: any): void;
    getDataURL(params?: {
        type?: 'Base64' | 'Blob';
        backgroundColor?: string;
        mimeType?: string;
        backgroundImage?: string;
        area?: {
            x: number;
            y: number;
            height: number;
            width: number;
        };
    }): Promise<unknown>;
    render(strokes?: Graphics[]): void;
    capturingDrawCurrentStroke(strokes: any): void;
    createNode(type: 'TextNode' | 'ImageNode' | 'PathNode', properties: {
        imageOrUri?: string | HTMLImageElement;
        x?: number;
        y?: number;
        text?: string;
        lineHeight?: number;
    }): Promise<void>;
    add(g: Graphics): this;
    getActiveObject(): Graphics | undefined;
    private appendCom;
    private createComFunc;
    private init;
    get renderer(): typeof renderer;
    private initGraphics;
    private setCanDraw;
    private setCanRender;
}
export declare function createApp(option: CropProps): Crop;
//# sourceMappingURL=core.d.ts.map